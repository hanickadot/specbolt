#include <iostream>

#include "peripherals/Memory.hpp"
#include "z80/Generated.hpp"
#include "z80/Z80.hpp"

#include <catch2/catch_test_macros.hpp>
#include <cstdint>
#include <ranges>

namespace specbolt {

TEST_CASE("Opcode generation tests") {
  SECTION("Test base opcode disassembly") {
    const auto &names = base_opcode_names();
    CHECK(names[0x00] == "nop");
    CHECK(names[0x01] == "ld bc, $nnnn");
    CHECK(names[0x02] == "ld (bc), a");
    CHECK(names[0x03] == "inc bc");
    CHECK(names[0x04] == "inc b");
    CHECK(names[0x05] == "dec b");
    CHECK(names[0x06] == "ld b, $nn");
    CHECK(names[0x07] == "rlca");
    CHECK(names[0x08] == "ex af, af'");
    CHECK(names[0x0a] == "ld a, (bc)");
    CHECK(names[0x0b] == "dec bc");
    CHECK(names[0x0c] == "inc c");
    CHECK(names[0x0d] == "dec c");
    CHECK(names[0x0e] == "ld c, $nn");
    CHECK(names[0x0f] == "rrca");
    CHECK(names[0x10] == "djnz $d");
    CHECK(names[0x11] == "ld de, $nnnn");
    CHECK(names[0x12] == "ld (de), a");
    CHECK(names[0x13] == "inc de");
    CHECK(names[0x14] == "inc d");
    CHECK(names[0x15] == "dec d");
    CHECK(names[0x16] == "ld d, $nn");
    CHECK(names[0x17] == "rla");
    CHECK(names[0x18] == "jr $d");
    CHECK(names[0x1a] == "ld a, (de)");
    CHECK(names[0x1b] == "dec de");
    CHECK(names[0x1c] == "inc e");
    CHECK(names[0x1d] == "dec e");
    CHECK(names[0x1e] == "ld e, $nn");
    CHECK(names[0x1f] == "rra");
    CHECK(names[0x20] == "jr nz $d");
    CHECK(names[0x21] == "ld hl, $nnnn");
    CHECK(names[0x22] == "ld ($nnnn), hl");
    CHECK(names[0x23] == "inc hl");
    CHECK(names[0x24] == "inc h");
    CHECK(names[0x25] == "dec h");
    CHECK(names[0x26] == "ld h, $nn");
    CHECK(names[0x27] == "daa");
    CHECK(names[0x28] == "jr z $d");
    CHECK(names[0x2a] == "ld hl, ($nnnn)");
    CHECK(names[0x2b] == "dec hl");
    CHECK(names[0x2c] == "inc l");
    CHECK(names[0x2d] == "dec l");
    CHECK(names[0x2e] == "ld l, $nn");
    CHECK(names[0x2f] == "cpl");
    CHECK(names[0x30] == "jr nc $d");
    CHECK(names[0x31] == "ld sp, $nnnn");
    CHECK(names[0x32] == "ld ($nnnn), a");
    CHECK(names[0x33] == "inc sp");
    CHECK(names[0x34] == "inc (hl)");
    CHECK(names[0x35] == "dec (hl)");
    CHECK(names[0x36] == "ld (hl), $nn");
    CHECK(names[0x37] == "scf");
    CHECK(names[0x38] == "jr c $d");
    CHECK(names[0x3a] == "ld a, ($nnnn)");
    CHECK(names[0x3b] == "dec sp");
    CHECK(names[0x3c] == "inc a");
    CHECK(names[0x3d] == "dec a");
    CHECK(names[0x3e] == "ld a, $nn");
    CHECK(names[0x3f] == "ccf");
    CHECK(names[0x40] == "ld b, b");
    CHECK(names[0x41] == "ld b, c");
    CHECK(names[0x42] == "ld b, d");
    CHECK(names[0x43] == "ld b, e");
    CHECK(names[0x44] == "ld b, h");
    CHECK(names[0x45] == "ld b, l");
    CHECK(names[0x46] == "ld b, (hl)");
    CHECK(names[0x47] == "ld b, a");
    CHECK(names[0x48] == "ld c, b");
    CHECK(names[0x49] == "ld c, c");
    CHECK(names[0x4a] == "ld c, d");
    CHECK(names[0x4b] == "ld c, e");
    CHECK(names[0x4c] == "ld c, h");
    CHECK(names[0x4d] == "ld c, l");
    CHECK(names[0x4e] == "ld c, (hl)");
    CHECK(names[0x4f] == "ld c, a");
    CHECK(names[0x50] == "ld d, b");
    CHECK(names[0x51] == "ld d, c");
    CHECK(names[0x52] == "ld d, d");
    CHECK(names[0x53] == "ld d, e");
    CHECK(names[0x54] == "ld d, h");
    CHECK(names[0x55] == "ld d, l");
    CHECK(names[0x56] == "ld d, (hl)");
    CHECK(names[0x57] == "ld d, a");
    CHECK(names[0x58] == "ld e, b");
    CHECK(names[0x59] == "ld e, c");
    CHECK(names[0x5a] == "ld e, d");
    CHECK(names[0x5b] == "ld e, e");
    CHECK(names[0x5c] == "ld e, h");
    CHECK(names[0x5d] == "ld e, l");
    CHECK(names[0x5e] == "ld e, (hl)");
    CHECK(names[0x5f] == "ld e, a");
    CHECK(names[0x60] == "ld h, b");
    CHECK(names[0x61] == "ld h, c");
    CHECK(names[0x62] == "ld h, d");
    CHECK(names[0x63] == "ld h, e");
    CHECK(names[0x64] == "ld h, h");
    CHECK(names[0x65] == "ld h, l");
    CHECK(names[0x66] == "ld h, (hl)");
    CHECK(names[0x67] == "ld h, a");
    CHECK(names[0x68] == "ld l, b");
    CHECK(names[0x69] == "ld l, c");
    CHECK(names[0x6a] == "ld l, d");
    CHECK(names[0x6b] == "ld l, e");
    CHECK(names[0x6c] == "ld l, h");
    CHECK(names[0x6d] == "ld l, l");
    CHECK(names[0x6e] == "ld l, (hl)");
    CHECK(names[0x6f] == "ld l, a");
    CHECK(names[0x70] == "ld (hl), b");
    CHECK(names[0x71] == "ld (hl), c");
    CHECK(names[0x72] == "ld (hl), d");
    CHECK(names[0x73] == "ld (hl), e");
    CHECK(names[0x74] == "ld (hl), h");
    CHECK(names[0x75] == "ld (hl), l");
    CHECK(names[0x77] == "ld (hl), a");
    CHECK(names[0x78] == "ld a, b");
    CHECK(names[0x79] == "ld a, c");
    CHECK(names[0x7a] == "ld a, d");
    CHECK(names[0x7b] == "ld a, e");
    CHECK(names[0x7c] == "ld a, h");
    CHECK(names[0x7d] == "ld a, l");
    CHECK(names[0x7e] == "ld a, (hl)");
    CHECK(names[0x7f] == "ld a, a");
    CHECK(names[0x80] == "add a, b");
    CHECK(names[0x81] == "add a, c");
    CHECK(names[0x82] == "add a, d");
    CHECK(names[0x83] == "add a, e");
    CHECK(names[0x84] == "add a, h");
    CHECK(names[0x85] == "add a, l");
    CHECK(names[0x86] == "add a, (hl)");
    CHECK(names[0x87] == "add a, a");
    CHECK(names[0x88] == "adc a, b");
    CHECK(names[0x89] == "adc a, c");
    CHECK(names[0x8a] == "adc a, d");
    CHECK(names[0x8b] == "adc a, e");
    CHECK(names[0x8c] == "adc a, h");
    CHECK(names[0x8d] == "adc a, l");
    CHECK(names[0x8e] == "adc a, (hl)");
    CHECK(names[0x8f] == "adc a, a");
    CHECK(names[0x90] == "sub a, b");
    CHECK(names[0x91] == "sub a, c");
    CHECK(names[0x92] == "sub a, d");
    CHECK(names[0x93] == "sub a, e");
    CHECK(names[0x94] == "sub a, h");
    CHECK(names[0x95] == "sub a, l");
    CHECK(names[0x96] == "sub a, (hl)");
    CHECK(names[0x97] == "sub a, a");
    CHECK(names[0x98] == "sbc a, b");
    CHECK(names[0x99] == "sbc a, c");
    CHECK(names[0x9a] == "sbc a, d");
    CHECK(names[0x9b] == "sbc a, e");
    CHECK(names[0x9c] == "sbc a, h");
    CHECK(names[0x9d] == "sbc a, l");
    CHECK(names[0x9e] == "sbc a, (hl)");
    CHECK(names[0x9f] == "sbc a, a");
    CHECK(names[0xa0] == "and b");
    CHECK(names[0xa1] == "and c");
    CHECK(names[0xa2] == "and d");
    CHECK(names[0xa3] == "and e");
    CHECK(names[0xa4] == "and h");
    CHECK(names[0xa5] == "and l");
    CHECK(names[0xa6] == "and (hl)");
    CHECK(names[0xa7] == "and a");
    CHECK(names[0xa8] == "xor b");
    CHECK(names[0xa9] == "xor c");
    CHECK(names[0xaa] == "xor d");
    CHECK(names[0xab] == "xor e");
    CHECK(names[0xac] == "xor h");
    CHECK(names[0xad] == "xor l");
    CHECK(names[0xae] == "xor (hl)");
    CHECK(names[0xaf] == "xor a");
    CHECK(names[0xb0] == "or b");
    CHECK(names[0xb1] == "or c");
    CHECK(names[0xb2] == "or d");
    CHECK(names[0xb3] == "or e");
    CHECK(names[0xb4] == "or h");
    CHECK(names[0xb5] == "or l");
    CHECK(names[0xb6] == "or (hl)");
    CHECK(names[0xb7] == "or a");
    CHECK(names[0xb8] == "cp b");
    CHECK(names[0xb9] == "cp c");
    CHECK(names[0xba] == "cp d");
    CHECK(names[0xbb] == "cp e");
    CHECK(names[0xbc] == "cp h");
    CHECK(names[0xbd] == "cp l");
    CHECK(names[0xbe] == "cp (hl)");
    CHECK(names[0xbf] == "cp a");
    CHECK(names[0xc0] == "ret nz");
    CHECK(names[0xc1] == "pop bc");
    CHECK(names[0xc2] == "jp nz, $nnnn");
    CHECK(names[0xc3] == "jp $nnnn");
    CHECK(names[0xc4] == "call nz, $nnnn");
    CHECK(names[0xc5] == "push bc");
    CHECK(names[0xc6] == "add a, $nn");
    CHECK(names[0xc7] == "rst 0x00");
    CHECK(names[0xc8] == "ret z");
    CHECK(names[0xc9] == "ret");
    CHECK(names[0xca] == "jp z, $nnnn");
    CHECK(names[0xcb] == "CB");
    CHECK(names[0xcc] == "call z, $nnnn");
    CHECK(names[0xcd] == "call $nnnn");
    CHECK(names[0xce] == "adc a, $nn");
    CHECK(names[0xcf] == "rst 0x08");
    CHECK(names[0xd0] == "ret nc");
    CHECK(names[0xd1] == "pop de");
    CHECK(names[0xd2] == "jp nc, $nnnn");
    CHECK(names[0xd3] == "out ($nn), a");
    CHECK(names[0xd4] == "call nc, $nnnn");
    CHECK(names[0xd5] == "push de");
    CHECK(names[0xd6] == "sub a, $nn");
    CHECK(names[0xd7] == "rst 0x10");
    CHECK(names[0xd8] == "ret c");
    CHECK(names[0xd9] == "exx");
    CHECK(names[0xda] == "jp c, $nnnn");
    CHECK(names[0xdb] == "in a, ($nn)");
    CHECK(names[0xdc] == "call c, $nnnn");
    CHECK(names[0xdd] == "DD");
    CHECK(names[0xde] == "sbc a, $nn");
    CHECK(names[0xdf] == "rst 0x18");
    CHECK(names[0xe0] == "ret po");
    CHECK(names[0xe1] == "pop hl");
    CHECK(names[0xe2] == "jp po, $nnnn");
    CHECK(names[0xe3] == "ex (sp), hl");
    CHECK(names[0xe4] == "call po, $nnnn");
    CHECK(names[0xe5] == "push hl");
    CHECK(names[0xe6] == "and $nn");
    CHECK(names[0xe7] == "rst 0x20");
    CHECK(names[0xe8] == "ret pe");
    CHECK(names[0xe9] == "jp (hl)");
    CHECK(names[0xea] == "jp pe, $nnnn");
    CHECK(names[0xeb] == "ex de, hl");
    CHECK(names[0xec] == "call pe, $nnnn");
    CHECK(names[0xed] == "ED");
    CHECK(names[0xee] == "xor $nn");
    CHECK(names[0xef] == "rst 0x28");
    CHECK(names[0xf0] == "ret p");
    CHECK(names[0xf1] == "pop af");
    CHECK(names[0xf2] == "jp p, $nnnn");
    CHECK(names[0xf3] == "di");
    CHECK(names[0xf4] == "call p, $nnnn");
    CHECK(names[0xf5] == "push af");
    CHECK(names[0xf6] == "or $nn");
    CHECK(names[0xf7] == "rst 0x30");
    CHECK(names[0xf8] == "ret m");
    CHECK(names[0xf9] == "ld sp, hl");
    CHECK(names[0xfa] == "jp m, $nnnn");
    CHECK(names[0xfb] == "ei");
    CHECK(names[0xfc] == "call m, $nnnn");
    CHECK(names[0xfe] == "cp $nn");
    CHECK(names[0xff] == "rst 0x38");
  }
}

} // namespace specbolt
